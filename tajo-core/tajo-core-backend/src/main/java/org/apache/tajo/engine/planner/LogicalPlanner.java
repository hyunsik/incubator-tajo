/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.tajo.engine.planner;

import com.google.common.base.Preconditions;
import com.google.common.collect.Lists;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.ContentSummary;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.tajo.algebra.*;
import org.apache.tajo.algebra.CreateTable.ColumnDefinition;
import org.apache.tajo.catalog.*;
import org.apache.tajo.catalog.partition.Partitions;
import org.apache.tajo.catalog.partition.Specifier;
import org.apache.tajo.catalog.proto.CatalogProtos;
import org.apache.tajo.common.TajoDataTypes;
import org.apache.tajo.common.TajoDataTypes.DataType;
import org.apache.tajo.datum.Datum;
import org.apache.tajo.datum.DatumFactory;
import org.apache.tajo.datum.NullDatum;
import org.apache.tajo.engine.eval.*;
import org.apache.tajo.engine.exception.InvalidQueryException;
import org.apache.tajo.engine.exception.UndefinedFunctionException;
import org.apache.tajo.engine.exception.VerifyException;
import org.apache.tajo.engine.function.AggFunction;
import org.apache.tajo.engine.function.GeneralFunction;
import org.apache.tajo.engine.planner.LogicalPlan.QueryBlock;
import org.apache.tajo.engine.planner.logical.*;
import org.apache.tajo.engine.utils.SchemaUtil;
import org.apache.tajo.exception.InternalException;
import org.apache.tajo.util.TUtil;

import java.util.List;
import java.util.Stack;

import static org.apache.tajo.algebra.Aggregation.GroupType;
import static org.apache.tajo.catalog.proto.CatalogProtos.FunctionType;
import static org.apache.tajo.engine.planner.LogicalPlan.BlockType;

/**
 * This class creates a logical plan from a parse tree ({@link org.apache.tajo.engine.parser.SQLAnalyzer})
 * generated by {@link org.apache.tajo.engine.parser.SQLAnalyzer}.
 *
 * Relational operators can be divided into two categories as follows:
 * <oi>
 *  <li>General operator: this type operators do not affect the tuple schema.
 *  Selection, Sort, and Limit belong to this type.</li>
 *  <li>Projectable operator: this type operators affects the tuple schema.
 *  Scan, Groupby, and Join belong to this type.
 *  </li>
 * </oi>
 */
public class LogicalPlanner extends BaseAlgebraVisitor<LogicalPlanner.PlanContext, LogicalNode> {
  private static Log LOG = LogFactory.getLog(LogicalPlanner.class);
  private final CatalogService catalog;

  public LogicalPlanner(CatalogService catalog) {
    this.catalog = catalog;
  }

  public static class PlanContext {
    LogicalPlan plan;
    QueryBlock block;

    public PlanContext(LogicalPlan plan, QueryBlock block) {
      this.plan = plan;
      this.block = block;
    }
  }

  /**
   * This generates a logical plan.
   *
   * @param expr A relational algebraic expression for a query.
   * @return A logical plan
   */
  public LogicalPlan createPlan(Expr expr) throws PlanningException {

    LogicalPlan plan = new LogicalPlan(this);
    LogicalNode subroot;

    Stack<OpType> stack = new Stack<OpType>();

    QueryBlock rootBlock = plan.newAndGetBlock(LogicalPlan.ROOT_BLOCK);
    PlanContext context = new PlanContext(plan, rootBlock);
    subroot = visit(context, stack, expr);

    LogicalRootNode root = new LogicalRootNode(plan.newPID());
    root.setInSchema(subroot.getOutSchema());
    root.setOutSchema(subroot.getOutSchema());
    root.setChild(subroot);
    plan.getRootBlock().setRoot(root);

    return plan;
  }

  public void preHook(PlanContext context, Stack<OpType> stack, Expr expr) {
    context.block = checkIfNewBlockOrGet(context.plan, context.block.getName());
    context.block.setAlgebraicExpr(expr);
  }

  public LogicalNode postHook(PlanContext context, Stack<OpType> stack, Expr expr, LogicalNode current)
      throws PlanningException {
    // Post work
    if ((expr.getType() == OpType.RelationList && ((RelationList) expr).size() == 1)
        || expr.getType() == OpType.Having) {
      return current;
    }

    // mark the node as the visited node and do post work for each operator
    context.block.postVisit(current, stack);
    if (current instanceof Projectable) {
      // check and set evaluated targets and update in/out schemas
      context.block.checkAndResolveTargets(current);
    }

    return current;
  }

  /**
   * It checks if the first node in this query block. If not, it creates and adds a new query block.
   * In addition, it always returns the query block corresponding to the block name.
   */
  private QueryBlock checkIfNewBlockOrGet(LogicalPlan plan, String blockName) {
    QueryBlock block = plan.getBlock(blockName);
    if (block == null) {
      return plan.newAndGetBlock(blockName);
    } else {
      return block;
    }
  }

  public TableSubQueryNode visitTableSubQuery(PlanContext context, Stack<OpType> stack, TablePrimarySubQuery expr)
      throws PlanningException {
    QueryBlock newBlock = context.plan.newAndGetBlock(expr.getName());
    PlanContext newContext = new PlanContext(context.plan, newBlock);
    Stack<OpType> newStack = new Stack<OpType>();
    LogicalNode child = visit(newContext, newStack, expr.getSubQuery());
    context.plan.connectBlocks(newContext.block, context.block, BlockType.TableSubQuery);
    return new TableSubQueryNode(context.plan.newPID(), expr.getName(), child);
  }


  @Override
  public ScanNode visitRelation(PlanContext context, Stack<OpType> stack, Relation expr)
      throws VerifyException {
    // 1. init phase

    // 2. build child plans
    // 3. build scan plan
    Relation relation = expr;
    TableDesc desc = catalog.getTableDesc(relation.getName());
    if (!desc.hasStats()) {
      updatePhysicalInfo(desc);
    }

    ScanNode scanNode;
    if (relation.hasAlias()) {
      scanNode = new ScanNode(context.plan.newPID(), desc, relation.getAlias());
    } else {
      scanNode = new ScanNode(context.plan.newPID(), desc);
    }

    return scanNode;
  }

  private void updatePhysicalInfo(TableDesc desc) {
    if (desc.getPath() != null) {
      try {
        FileSystem fs = desc.getPath().getFileSystem(new Configuration());
        FileStatus status = fs.getFileStatus(desc.getPath());
        if (desc.getStats() != null && (status.isDirectory() || status.isFile())) {
          ContentSummary summary = fs.getContentSummary(desc.getPath());
          if (summary != null) {
            long volume = summary.getLength();
            desc.getStats().setNumBytes(volume);
          }
        }
      } catch (Throwable t) {
        LOG.warn(t);
      }
    }
  }

  /*===============================================================================================
    JOIN SECTION
   ===============================================================================================*/
  @Override
  public LogicalNode visitRelationList(PlanContext context, Stack<OpType> stack, RelationList relations)
      throws PlanningException {

    LogicalNode current = visit(context, stack, relations.getRelations()[0]);

    LogicalNode left;
    LogicalNode right;
    if (relations.size() > 1) {

      for (int i = 1; i < relations.size(); i++) {
        left = current;
        right = visit(context, stack, relations.getRelations()[i]);
        current = createCatasianProduct(context.plan, left, right);
      }
    }

    return current;
  }

  @Override
  public LogicalNode visitJoin(PlanContext context, Stack<OpType> stack, Join join)
      throws PlanningException {
    // Phase 1: Init
    LogicalPlan plan = context.plan;
    QueryBlock block = context.block;

    // Phase 2: build child plans
    stack.push(OpType.Join);
    LogicalNode left = visit(context, stack, join.getLeft());
    LogicalNode right = visit(context, stack, join.getRight());
    stack.pop();

    // Phase 3: build this plan
    JoinNode joinNode = new JoinNode(plan.newPID(), join.getJoinType(), left, right);

    // Set A merged input schema
    Schema merged;
    if (join.isNatural()) {
      merged = getNaturalJoin(left, right);
    } else {
      merged = SchemaUtil.merge(left.getOutSchema(), right.getOutSchema());
    }
    joinNode.setInSchema(merged);
    joinNode.setOutSchema(merged);

    // Determine join conditions
    if (join.isNatural()) { // if natural join, it should have the equi-join conditions by common column names
      Schema leftSchema = joinNode.getLeftChild().getInSchema();
      Schema rightSchema = joinNode.getRightChild().getInSchema();
      Schema commons = SchemaUtil.getCommons(leftSchema, rightSchema);
      EvalNode njCond = getNaturalJoinCondition(leftSchema, rightSchema, commons);
      joinNode.setJoinQual(njCond);
    } else if (join.hasQual()) { // otherwise, the given join conditions are set
      joinNode.setJoinQual(createEvalTree(plan, block, join.getQual()));
    }

    return joinNode;
  }

  private static EvalNode getNaturalJoinCondition(Schema outer, Schema inner, Schema commons) {
    EvalNode njQual = null;
    EvalNode equiQual;

    Column leftJoinKey;
    Column rightJoinKey;
    for (Column common : commons.getColumns()) {
      leftJoinKey = outer.getColumnByName(common.getColumnName());
      rightJoinKey = inner.getColumnByName(common.getColumnName());
      equiQual = new BinaryEval(EvalType.EQUAL,
          new FieldEval(leftJoinKey), new FieldEval(rightJoinKey));
      if (njQual == null) {
        njQual = equiQual;
      } else {
        njQual = new BinaryEval(EvalType.AND,
            njQual, equiQual);
      }
    }

    return njQual;
  }

  private static LogicalNode createCatasianProduct(LogicalPlan plan, LogicalNode left, LogicalNode right) {
    JoinNode join = new JoinNode(plan.newPID(), JoinType.CROSS, left, right);
    Schema joinSchema = SchemaUtil.merge(
        join.getLeftChild().getOutSchema(),
        join.getRightChild().getOutSchema());
    join.setInSchema(joinSchema);
    join.setOutSchema(joinSchema);

    return join;
  }

  private static Schema getNaturalJoin(LogicalNode outer, LogicalNode inner) {
    Schema joinSchema = new Schema();
    Schema commons = SchemaUtil.getCommons(outer.getOutSchema(),
        inner.getOutSchema());
    joinSchema.addColumns(commons);
    for (Column c : outer.getOutSchema().getColumns()) {
      for (Column common : commons.getColumns()) {
        if (!common.getColumnName().equals(c.getColumnName())) {
          joinSchema.addColumn(c);
        }
      }
    }

    for (Column c : inner.getOutSchema().getColumns()) {
      for (Column common : commons.getColumns()) {
        if (!common.getColumnName().equals(c.getColumnName())) {
          joinSchema.addColumn(c);
        }
      }
    }
    return joinSchema;
  }

  /*===============================================================================================
    SET OPERATION SECTION
   ===============================================================================================*/

  @Override
  public LogicalNode visitUnion(PlanContext context, Stack<OpType> stack, SetOperation setOperation)
      throws PlanningException {
    return buildSetPlan(context, stack, setOperation);
  }

  @Override
  public LogicalNode visitExcept(PlanContext context, Stack<OpType> stack, SetOperation setOperation)
      throws PlanningException {
    return buildSetPlan(context, stack, setOperation);
  }

  @Override
  public LogicalNode visitIntersect(PlanContext context, Stack<OpType> stack, SetOperation setOperation)
      throws PlanningException {
    return buildSetPlan(context, stack, setOperation);
  }

  private LogicalNode buildSetPlan(PlanContext context, Stack<OpType> stack, SetOperation setOperation)
      throws PlanningException {

    // 1. Init Phase
    LogicalPlan plan = context.plan;
    QueryBlock block = context.block;

    // 2. Build Child Plans
    PlanContext leftContext = new PlanContext(plan, plan.newNoNameBlock());
    Stack<OpType> leftStack = new Stack<OpType>();
    LogicalNode left = visit(leftContext, leftStack, setOperation.getLeft());
    TableSubQueryNode leftSubQuery = new TableSubQueryNode(plan.newPID(), leftContext.block.getName(), left);
    context.plan.connectBlocks(leftContext.block, context.block, BlockType.TableSubQuery);

    PlanContext rightContext = new PlanContext(plan, plan.newNoNameBlock());
    Stack<OpType> rightStack = new Stack<OpType>();
    LogicalNode right = visit(rightContext, rightStack, setOperation.getRight());
    TableSubQueryNode rightSubQuery = new TableSubQueryNode(plan.newPID(), rightContext.block.getName(), right);
    context.plan.connectBlocks(rightContext.block, context.block, BlockType.TableSubQuery);

    BinaryNode setOp;
    if (setOperation.getType() == OpType.Union) {
      setOp = new UnionNode(plan.newPID(), leftSubQuery, rightSubQuery);
    } else if (setOperation.getType() == OpType.Except) {
      setOp = new ExceptNode(plan.newPID(), leftSubQuery, rightSubQuery);
    } else if (setOperation.getType() == OpType.Intersect) {
      setOp = new IntersectNode(plan.newPID(), leftSubQuery, rightSubQuery);
    } else {
      throw new VerifyException("Invalid Type: " + setOperation.getType());
    }

    // Strip the table names from the targets of the both blocks
    // in order to check the equivalence the schemas of both blocks.
    Target [] leftStrippedTargets = PlannerUtil.stripTarget(leftContext.block.getCurrentTargets());

    Schema outSchema = PlannerUtil.targetToSchema(leftStrippedTargets);
    setOp.setInSchema(leftSubQuery.getOutSchema());
    setOp.setOutSchema(outSchema);

    if (isNoUpperProjection(stack)) {
      block.targetListManager = new TargetListManager(plan, leftStrippedTargets);
      block.targetListManager.resolveAll();
      block.setSchema(block.targetListManager.getUpdatedSchema());
    }

    return setOp;
  }

  @Override
  public SelectionNode visitFilter(PlanContext context, Stack<OpType> stack, Selection selection)
      throws PlanningException {
    // 1. init phase:
    LogicalPlan plan = context.plan;
    QueryBlock block = context.block;

    // 1.1 finding pushable expressions from search condition

    // 2. build child plans:
    stack.push(OpType.Filter);
    LogicalNode child = visit(context, stack, selection.getChild());
    stack.pop();

    // 3. build this plan:
    EvalNode searchCondition = createEvalTree(plan, block, selection.getQual());
    SelectionNode selectionNode = new SelectionNode(plan.newPID(), searchCondition);

    // 4. set child plan, update input/output schemas:
    selectionNode.setChild(child);
    selectionNode.setInSchema(child.getOutSchema());
    selectionNode.setOutSchema(child.getOutSchema());

    // 5. update block information:
    block.setSelectionNode(selectionNode);

    return selectionNode;
  }

  /*===============================================================================================
    GROUP BY SECTION
   ===============================================================================================*/

  @Override
  public LogicalNode visitGroupBy(PlanContext context, Stack<OpType> stack, Aggregation aggregation)
      throws PlanningException {

    // 1. Initialization Phase:
    LogicalPlan plan = context.plan;
    QueryBlock block = context.block;

    // 2. Build Child Plan Phase:
    stack.push(OpType.Aggregation);
    LogicalNode child = visit(context, stack, aggregation.getChild());
    stack.pop();

    // 3. Build This Plan:
    Aggregation.GroupElement [] groupElements = aggregation.getGroupSet();

    if (groupElements[0].getType() == GroupType.OrdinaryGroup) { // for group-by
      GroupElement annotatedElements [] = new GroupElement[groupElements.length];
      for (int i = 0; i < groupElements.length; i++) {
        annotatedElements[i] = new GroupElement(
            groupElements[i].getType(),
            annotateGroupingColumn(plan, block, groupElements[i].getColumns(), null));
      }
      GroupbyNode groupingNode = new GroupbyNode(plan.newPID(), annotatedElements[0].getColumns());
      if (aggregation.hasHavingCondition()) {
        groupingNode.setHavingCondition(
            createEvalTree(plan, block, aggregation.getHavingCondition()));
      }

      // 4. Set Child Plan and Update Input Schemes Phase
      groupingNode.setChild(child);
      block.setGroupbyNode(groupingNode);
      groupingNode.setInSchema(child.getOutSchema());

      // 5. Update Output Schema and Targets for Upper Plan

      return groupingNode;

    } else if (groupElements[0].getType() == GroupType.Cube) { // for cube by
      List<Column[]> cuboids  = generateCuboids(annotateGroupingColumn(plan, block,
          groupElements[0].getColumns(), null));
      UnionNode topUnion = createGroupByUnion(plan, block, child, cuboids, 0);
      block.resolveGroupingRequired();
      block.getTargetListManager().resolveAll();

      return topUnion;
    } else {
      throw new InvalidQueryException("Not support grouping");
    }
  }

  private UnionNode createGroupByUnion(final LogicalPlan plan,
                                       final QueryBlock block,
                                       final LogicalNode subNode,
                                       final List<Column[]> cuboids,
                                       final int idx) {
    UnionNode union;
    try {
      if ((cuboids.size() - idx) > 2) {
        GroupbyNode g1 = new GroupbyNode(plan.newPID(), cuboids.get(idx));
        Target[] clone = cloneTargets(block.getCurrentTargets());

        g1.setTargets(clone);
        g1.setChild((LogicalNode) subNode.clone());
        g1.setInSchema(g1.getChild().getOutSchema());
        Schema outSchema = getProjectedSchema(plan, block.getCurrentTargets());
        g1.setOutSchema(outSchema);

        LogicalNode right = createGroupByUnion(plan, block, subNode, cuboids, idx+1);
        union = new UnionNode(plan.newPID(), g1, right);
        union.setInSchema(g1.getOutSchema());
        union.setOutSchema(g1.getOutSchema());

        return union;
      } else {
        GroupbyNode g1 = new GroupbyNode(plan.newPID(), cuboids.get(idx));
        Target[] clone = cloneTargets(block.getCurrentTargets());
        g1.setTargets(clone);
        g1.setChild((LogicalNode) subNode.clone());
        g1.setInSchema(g1.getChild().getOutSchema());
        Schema outSchema = getProjectedSchema(plan, clone);
        g1.setOutSchema(outSchema);

        GroupbyNode g2 = new GroupbyNode(plan.newPID(), cuboids.get(idx+1));
        clone = cloneTargets(block.getCurrentTargets());
        g2.setTargets(clone);
        g2.setChild((LogicalNode) subNode.clone());
        g2.setInSchema(g1.getChild().getOutSchema());
        outSchema = getProjectedSchema(plan, clone);
        g2.setOutSchema(outSchema);
        union = new UnionNode(plan.newPID(), g1, g2);
        union.setInSchema(g1.getOutSchema());
        union.setOutSchema(g1.getOutSchema());

        return union;
      }
    } catch (CloneNotSupportedException cnse) {
      LOG.error(cnse);
      throw new InvalidQueryException(cnse);
    }
  }

  /**
   * It transforms a list of column references into a list of annotated columns with considering aliased expressions.
   */
  private Column[] annotateGroupingColumn(LogicalPlan plan, QueryBlock block,
                                           ColumnReferenceExpr[] columnRefs, LogicalNode child)
      throws PlanningException {

    Column[] columns = new Column[columnRefs.length];
    for (int i = 0; i < columnRefs.length; i++) {
      columns[i] = plan.resolveColumn(block, null, columnRefs[i]);
      columns[i] = plan.getColumnOrAliasedColumn(block, columns[i]);
    }

    return columns;
  }

  private static Target[] cloneTargets(Target[] sourceTargets)
      throws CloneNotSupportedException {
    Target[] clone = new Target[sourceTargets.length];
    for (int i = 0; i < sourceTargets.length; i++) {
      clone[i] = (Target) sourceTargets[i].clone();
    }

    return clone;
  }

  public static final Column[] ALL= Lists.newArrayList().toArray(new Column[0]);

  public static List<Column[]> generateCuboids(Column[] columns) {
    int numCuboids = (int) Math.pow(2, columns.length);
    int maxBits = columns.length;

    List<Column[]> cube = Lists.newArrayList();
    List<Column> cuboidCols;

    cube.add(ALL);
    for (int cuboidId = 1; cuboidId < numCuboids; cuboidId++) {
      cuboidCols = Lists.newArrayList();
      for (int j = 0; j < maxBits; j++) {
        int bit = 1 << j;
        if ((cuboidId & bit) == bit) {
          cuboidCols.add(columns[j]);
        }
      }
      cube.add(cuboidCols.toArray(new Column[cuboidCols.size()]));
    }
    return cube;
  }

  /*===============================================================================================
    SORT SECTION
   ===============================================================================================*/

  @Override
  public SortNode visitSort(PlanContext context, Stack<OpType> stack, Sort sort) throws PlanningException {

    // 1. Initialization Phase:
    LogicalPlan plan = context.plan;
    QueryBlock block = context.block;

    // 2. Build Child Plans:
    stack.push(OpType.Sort);
    LogicalNode child = visit(context, stack, sort.getChild());
    child = insertGroupbyNodeIfUnresolved(plan, block, child, stack);
    stack.pop();

    // 3. Build this plan:
    SortSpec[] annotatedSortSpecs = new SortSpec[sort.getSortSpecs().length];
    Column column;
    Sort.SortSpec[] sortSpecs = sort.getSortSpecs();
    for (int i = 0; i < sort.getSortSpecs().length; i++) {
      column = plan.resolveColumn(block, null, sortSpecs[i].getKey());
      column = plan.getColumnOrAliasedColumn(block, column);
      annotatedSortSpecs[i] = new SortSpec(column, sortSpecs[i].isAscending(), sortSpecs[i].isNullFirst());
    }
    SortNode sortNode = new SortNode(context.plan.newPID(), annotatedSortSpecs);

    // 4. Set Child Plan, Update Input/Output Schemas:
    sortNode.setChild(child);
    sortNode.setInSchema(child.getOutSchema());
    sortNode.setOutSchema(child.getOutSchema());

    return sortNode;
  }

  @Override
  public LimitNode visitLimit(PlanContext context, Stack<OpType> stack, Limit limit) throws PlanningException {
    // 1. Init Phase:
    LogicalPlan plan = context.plan;
    QueryBlock block = context.block;

    // build child plans
    stack.push(OpType.Limit);
    LogicalNode child = visit(context, stack, limit.getChild());
    stack.pop();

    // build limit plan
    EvalNode firstFetchNum = createEvalTree(plan, block, limit.getFetchFirstNum());
    firstFetchNum.eval(null, null, null);
    LimitNode limitNode = new LimitNode(context.plan.newPID(), firstFetchNum.terminate(null).asInt8());

    // set child plan and update input/output schemas.
    limitNode.setChild(child);
    limitNode.setInSchema(child.getOutSchema());
    limitNode.setOutSchema(child.getOutSchema());
    return limitNode;
  }

  /*===============================================================================================
    PROJECTION SECTION
   ===============================================================================================*/

  @Override
  public LogicalNode visitProjection(PlanContext context, Stack<OpType> stack, Projection projection)
      throws PlanningException {

    //1: init Phase
    LogicalPlan plan = context.plan;
    QueryBlock block = context.block;

    if (!projection.isAllProjected()) {
      block.targetListManager = new TargetListManager(plan, projection);
    }

    if (!projection.hasChild()) {
      EvalExprNode evalOnly =
          new EvalExprNode(context.plan.newPID(), annotateTargets(plan, block, projection.getTargets()));
      evalOnly.setOutSchema(getProjectedSchema(plan, evalOnly.getExprs()));
      block.setProjectionNode(evalOnly);
      for (int i = 0; i < evalOnly.getTargets().length; i++) {
        block.targetListManager.fill(i, evalOnly.getTargets()[i]);
      }
      return evalOnly;
    }

    // 2: Build Child Plans
    stack.push(OpType.Projection);
    LogicalNode child = visit(context, stack, projection.getChild());
    child = insertGroupbyNodeIfUnresolved(plan, block, child, stack);
    stack.pop();

    // All targets must be evaluable before the projection.
    Preconditions.checkState(block.getTargetListManager().isAllResolved(),
        "Some targets cannot be evaluated in the query block \"%s\"", block.getName());

    ProjectionNode projectionNode;
    if (projection.isAllProjected()) {
      projectionNode = new ProjectionNode(context.plan.newPID(), PlannerUtil.schemaToTargets(child.getOutSchema()));
    } else {
      projectionNode = new ProjectionNode(context.plan.newPID(), block.getCurrentTargets());
    }

    block.setProjectionNode(projectionNode);
    projectionNode.setOutSchema(getProjectedSchema(plan, projectionNode.getTargets()));
    projectionNode.setInSchema(child.getOutSchema());
    projectionNode.setChild(child);

    if (projection.isDistinct() && block.hasGrouping()) {
      throw new VerifyException("Cannot support grouping and distinct at the same time");
    } else {
      if (projection.isDistinct()) {
        Schema outSchema = projectionNode.getOutSchema();
        GroupbyNode dupRemoval = new GroupbyNode(plan.newPID(), outSchema.toArray());
        dupRemoval.setTargets(block.getTargetListManager().getTargets());
        dupRemoval.setInSchema(child.getOutSchema());
        dupRemoval.setOutSchema(outSchema);
        dupRemoval.setChild(child);
        projectionNode.setChild(dupRemoval);
      }
    }

    return projectionNode;
  }

  /**
   * Insert a group-by operator before a sort or a projection operator.
   * It is used only when a group-by clause is not given.
   */
  private LogicalNode insertGroupbyNodeIfUnresolved(LogicalPlan plan, QueryBlock block,
                                                    LogicalNode child, Stack<OpType> stack) throws PlanningException {

    if (!block.isGroupingResolved()) {
      GroupbyNode groupbyNode = new GroupbyNode(plan.newPID(), new Column[] {});
      groupbyNode.setTargets(block.getCurrentTargets());
      groupbyNode.setChild(child);
      groupbyNode.setInSchema(child.getOutSchema());

      block.postVisit(groupbyNode, stack);
      block.checkAndResolveTargets(groupbyNode);
      return groupbyNode;
    } else {
      return child;
    }
  }

  private boolean isNoUpperProjection(Stack<OpType> stack) {
    for (OpType node : stack) {
      if (!( (node == OpType.Projection) || (node == OpType.Aggregation) || (node == OpType.Join) )) {
        return false;
      }
    }

    return true;
  }

  /*===============================================================================================
    Data Definition Language (DDL) SECTION
   ===============================================================================================*/

  @Override
  public LogicalNode visitCreateTable(PlanContext context, Stack<OpType> stack, CreateTable expr)
      throws PlanningException {

    String tableName = expr.getTableName();

    if (expr.hasSubQuery()) {
      stack.add(OpType.CreateTable);
      LogicalNode subQuery = visit(context, stack, expr.getSubQuery());
      stack.pop();
      StoreTableNode storeNode = new StoreTableNode(context.plan.newPID(), tableName);
      storeNode.setCreateTable();
      storeNode.setChild(subQuery);

      if (expr.hasTableElements()) {
        Schema schema = convertTableElementsSchema(expr.getTableElements());
        storeNode.setOutSchema(schema);
      } else {
        storeNode.setOutSchema(subQuery.getOutSchema());
      }
      storeNode.setInSchema(subQuery.getOutSchema());

      if (expr.hasStorageType()) {
        storeNode.setStorageType(CatalogUtil.getStoreType(expr.getStorageType()));
      } else {
        // default type
        storeNode.setStorageType(CatalogProtos.StoreType.CSV);
      }

      if (expr.hasParams()) {
        Options options = new Options();
        options.putAll(expr.getParams());
        storeNode.setOptions(options);
      }

      return storeNode;
    } else {
      CreateTableNode createTableNode = new CreateTableNode(context.plan.newPID(), expr.getTableName(),
          convertTableElementsSchema(expr.getTableElements()));

      if (expr.isExternal()) {
        createTableNode.setExternal(true);
      }

      if (expr.hasStorageType()) {
        createTableNode.setStorageType(CatalogUtil.getStoreType(expr.getStorageType()));
      } else {
        // default type
        // TODO - it should be configurable.
        createTableNode.setStorageType(CatalogProtos.StoreType.CSV);
      }
      if (expr.hasParams()) {
        Options options = new Options();
        options.putAll(expr.getParams());
        createTableNode.setOptions(options);
      }

      if (expr.hasLocation()) {
        createTableNode.setPath(new Path(expr.getLocation()));
      }

      if (expr.hasPartition()) {
        createTableNode.setPartitions(convertTableElementsPartition(context, expr));
      }
      return createTableNode;
    }
  }

  /**
   * convert table elements into Partition.
   *
   * @param context
   * @param expr
   * @return
   * @throws PlanningException
   */
  private Partitions convertTableElementsPartition(PlanContext context,
                                                   CreateTable expr) throws PlanningException {
    Schema schema = convertTableElementsSchema(expr.getTableElements());
    Partitions partitions = null;
    List<Specifier> specifiers = null;
    if (expr.hasPartition()) {
      partitions = new Partitions();
      specifiers = TUtil.newList();

      partitions.setPartitionsType(CatalogProtos.PartitionsType.valueOf(expr.getPartition()
          .getPartitionType().name()));

      if (expr.getPartition().getPartitionType().equals(CreateTable.PartitionType.HASH)) {
        CreateTable.HashPartition hashPartition = expr.getPartition();

        partitions.setColumns(convertTableElementsColumns(expr.getTableElements()
            , hashPartition.getColumns()));

        if (hashPartition.getColumns() != null) {
          if (hashPartition.getQuantifier() != null) {
            String quantity = ((LiteralValue)hashPartition.getQuantifier()).getValue();
            partitions.setNumPartitions(Integer.parseInt(quantity));
          }

          if (hashPartition.getSpecifiers() != null) {
            for(CreateTable.PartitionSpecifier eachSpec: hashPartition.getSpecifiers()) {
              specifiers.add(new Specifier(eachSpec.getName()));
            }
          }

          if (specifiers.isEmpty() && partitions.getNumPartitions() > 0) {
            for (int i = 0; i < partitions.getNumPartitions(); i++) {
              String partitionName = partitions.getPartitionsType().name() + "_" + expr
                  .getTableName() + "_" + i;
              specifiers.add(new Specifier(partitionName));
            }
          }

          if (!specifiers.isEmpty())
            partitions.setSpecifiers(specifiers);
        }
      } else if (expr.getPartition().getPartitionType().equals(CreateTable.PartitionType.LIST)) {
        CreateTable.ListPartition listPartition = expr.getPartition();

        partitions.setColumns(convertTableElementsColumns(expr.getTableElements()
            , listPartition.getColumns()));

        if (listPartition.getSpecifiers() != null) {
          StringBuffer sb = new StringBuffer();

          for(CreateTable.ListPartitionSpecifier eachSpec: listPartition.getSpecifiers()) {
            Specifier specifier = new Specifier(eachSpec.getName());
            sb.delete(0, sb.length());
            for(Expr eachExpr : eachSpec.getValueList().getValues()) {
              context.block.setSchema(schema);
              EvalNode eval = createEvalTree(context.plan, context.block, eachExpr);
              if(sb.length() > 1)
                sb.append(",");

              sb.append(eval.toString());
            }
            specifier.setExpressions(sb.toString());
            specifiers.add(specifier);
          }
          if (!specifiers.isEmpty())
            partitions.setSpecifiers(specifiers);
        }
      } else if (expr.getPartition().getPartitionType().equals(CreateTable.PartitionType.RANGE)) {
        CreateTable.RangePartition rangePartition = expr.getPartition();

        partitions.setColumns(convertTableElementsColumns(expr.getTableElements()
            , rangePartition.getColumns()));

        if (rangePartition.getSpecifiers() != null) {
          for(CreateTable.RangePartitionSpecifier eachSpec: rangePartition.getSpecifiers()) {
            Specifier specifier = new Specifier();

            if (eachSpec.getName() != null)
              specifier.setName(eachSpec.getName());

            if (eachSpec.getEnd() != null) {
              context.block.setSchema(schema);
              EvalNode eval = createEvalTree(context.plan, context.block, eachSpec.getEnd());
              specifier.setExpressions(eval.toString());
            }

            if(eachSpec.isEndMaxValue()) {
              specifier.setExpressions(null);
            }
            specifiers.add(specifier);
          }
          if (!specifiers.isEmpty())
            partitions.setSpecifiers(specifiers);
        }
      } else if (expr.getPartition().getPartitionType().equals(CreateTable.PartitionType.COLUMN)) {
        CreateTable.ColumnPartition columnPartition = expr.getPartition();

        partitions.setColumns(convertTableElementsColumns(expr.getTableElements()
            , columnPartition.getColumns()));
      }
    }

    return partitions;
  }


  /**
   * It transforms table definition elements to schema.
   *
   * @param elements to be transformed
   * @return schema transformed from table definition elements
   */
  private Schema convertTableElementsSchema(CreateTable.ColumnDefinition [] elements) {
    Schema schema = new Schema();

    for (CreateTable.ColumnDefinition columnDefinition: elements) {
      schema.addColumn(convertColumn(columnDefinition));
    }

    return schema;
  }

  private List<Column> convertTableElementsColumns(CreateTable.ColumnDefinition [] elements,
                                                   ColumnReferenceExpr[] references) {
    List<Column> columnList = TUtil.newList();

    for(CreateTable.ColumnDefinition columnDefinition: elements) {
      for(ColumnReferenceExpr eachReference: references) {
        if (columnDefinition.getColumnName().equalsIgnoreCase(eachReference.getName())) {
          columnList.add(convertColumn(columnDefinition));
        }
      }
    }

    return columnList;
  }

  private DataType convertDataType(DataTypeExpr dataType) {
    TajoDataTypes.Type type = TajoDataTypes.Type.valueOf(dataType.getTypeName());

    DataType.Builder builder = DataType.newBuilder();
    builder.setType(type);
    if (dataType.hasLengthOrPrecision()) {
      builder.setLength(dataType.getLengthOrPrecision());
    }
    return builder.build();
  }

  private Column convertColumn(ColumnDefinition columnDefinition) {
    return new Column(columnDefinition.getColumnName(), convertDataType(columnDefinition));
  }

  public LogicalNode visitInsert(PlanContext context, Stack<OpType> stack, Insert expr) throws PlanningException {
    stack.push(expr.getType());
    QueryBlock newQueryBlock = context.plan.newNoNameBlock();
    PlanContext newContext = new PlanContext(context.plan, newQueryBlock);
    Stack<OpType> subStack = new Stack<OpType>();
    LogicalNode subQuery = visit(newContext, subStack, expr.getSubQuery());
    context.plan.connectBlocks(newQueryBlock, context.block, BlockType.TableSubQuery);
    stack.pop();

    InsertNode insertNode = null;
    if (expr.hasTableName()) {
      TableDesc desc = catalog.getTableDesc(expr.getTableName());
      context.block.addRelation(new ScanNode(context.plan.newPID(), desc));

      Schema targetSchema = new Schema();
      if (expr.hasTargetColumns()) {
        String [] targetColumnNames = expr.getTargetColumns();
        for (int i = 0; i < targetColumnNames.length; i++) {
          Column targetColumn = context.plan.resolveColumn(context.block, null, new ColumnReferenceExpr(targetColumnNames[i]));
          targetSchema.addColumn(targetColumn);
        }
      } else {
        Schema targetTableSchema = desc.getSchema();
        for (int i = 0; i < subQuery.getOutSchema().getColumnNum(); i++) {
          targetSchema.addColumn(targetTableSchema.getColumn(i));
        }
      }

      insertNode = new InsertNode(context.plan.newPID(), desc, subQuery);
      insertNode.setTargetSchema(targetSchema);
      insertNode.setOutSchema(targetSchema);
    }

    if (expr.hasLocation()) {
      insertNode = new InsertNode(context.plan.newPID(), new Path(expr.getLocation()), subQuery);
      if (expr.hasStorageType()) {
        insertNode.setStorageType(CatalogUtil.getStoreType(expr.getStorageType()));
      }
      if (expr.hasParams()) {
        Options options = new Options();
        options.putAll(expr.getParams());
        insertNode.setOptions(options);
      }
    }

    insertNode.setOverwrite(expr.isOverwrite());

    return insertNode;
  }

  @Override
  public LogicalNode visitDropTable(PlanContext context, Stack<OpType> stack, DropTable dropTable) {
    DropTableNode dropTableNode = new DropTableNode(context.plan.newPID(), dropTable.getTableName(),
        dropTable.isPurge());
    return dropTableNode;
  }

  /*===============================================================================================
    Expression SECTION
   ===============================================================================================*/

  public EvalNode createEvalTree(LogicalPlan plan, QueryBlock block, final Expr expr)
      throws PlanningException {

    switch(expr.getType()) {
      // constants
      case Null:
        return new ConstEval(NullDatum.get());

      case Literal:
        LiteralValue literal = (LiteralValue) expr;
        switch (literal.getValueType()) {
          case Boolean:
            return new ConstEval(DatumFactory.createBool(((BooleanLiteral)literal).isTrue()));
          case String:
            return new ConstEval(DatumFactory.createText(literal.getValue()));
          case Unsigned_Integer:
            return new ConstEval(DatumFactory.createInt4(literal.getValue()));
          case Unsigned_Large_Integer:
            return new ConstEval(DatumFactory.createInt8(literal.getValue()));
          case Unsigned_Float:
            return new ConstEval(DatumFactory.createFloat8(literal.getValue()));
          default:
            throw new RuntimeException("Unsupported type: " + literal.getValueType());
        }

      case Sign:
        SignedExpr signedExpr = (SignedExpr) expr;
        EvalNode numericExpr = createEvalTree(plan, block, signedExpr.getChild());
        if (signedExpr.isNegative()) {
          return new SignedEval(signedExpr.isNegative(), numericExpr);
        } else {
          return numericExpr;
        }

      case Cast:
        CastExpr cast = (CastExpr) expr;
        return new CastEval(createEvalTree(plan, block, cast.getOperand()),
            convertDataType(cast.getTarget()));

      case ValueList: {
        ValueListExpr valueList = (ValueListExpr) expr;
        Datum[] values = new Datum[valueList.getValues().length];
        ConstEval [] constEvals = new ConstEval[valueList.getValues().length];
        for (int i = 0; i < valueList.getValues().length; i++) {
          constEvals[i] = (ConstEval) createEvalTree(plan, block, valueList.getValues()[i]);
          values[i] = constEvals[i].getValue();
        }
        return new RowConstantEval(values);
      }

        // unary expression
      case Not:
        NotExpr notExpr = (NotExpr) expr;
        return new NotEval(createEvalTree(plan, block, notExpr.getChild()));

      case Between: {
        BetweenPredicate between = (BetweenPredicate) expr;
        BetweenPredicateEval betweenEval = new BetweenPredicateEval(between.isNot(), between.isSymmetric(),
            createEvalTree(plan, block, between.predicand()), createEvalTree(plan, block, between.begin()),
            createEvalTree(plan, block, between.end()));
        return betweenEval;
      }
      // pattern matching predicates
      case LikePredicate:
      case SimilarToPredicate:
      case Regexp:
        PatternMatchPredicate patternMatch = (PatternMatchPredicate) expr;
        EvalNode field = createEvalTree(plan, block, patternMatch.getPredicand());
        ConstEval pattern = (ConstEval) createEvalTree(plan, block, patternMatch.getPattern());

        // A pattern is a const value in pattern matching predicates.
        // In a binary expression, the result is always null if a const value in left or right side is null.
        if (pattern.getValue() instanceof NullDatum) {
          return new ConstEval(NullDatum.get());
        } else {
          if (expr.getType() == OpType.LikePredicate) {
            return new LikePredicateEval(patternMatch.isNot(), field, pattern, patternMatch.isCaseInsensitive());
          } else if (expr.getType() == OpType.SimilarToPredicate) {
            return new SimilarToPredicateEval(patternMatch.isNot(), field, pattern);
          } else {
            return new RegexPredicateEval(patternMatch.isNot(), field, pattern, patternMatch.isCaseInsensitive());
          }
        }

      case InPredicate: {
        InPredicate inPredicate = (InPredicate) expr;
        FieldEval predicand =
            new FieldEval(plan.resolveColumn(block, null, (ColumnReferenceExpr) inPredicate.getPredicand()));
        RowConstantEval rowConstantEval = (RowConstantEval) createEvalTree(plan, block, inPredicate.getInValue());
        return new InEval(predicand, rowConstantEval, inPredicate.isNot());
      }

      case And:
      case Or:
      case Equals:
      case NotEquals:
      case LessThan:
      case LessThanOrEquals:
      case GreaterThan:
      case GreaterThanOrEquals:
      case Plus:
      case Minus:
      case Multiply:
      case Divide:
      case Modular:
      case Concatenate:
        BinaryOperator bin = (BinaryOperator) expr;
        return new BinaryEval(exprTypeToEvalType(expr.getType()),
            createEvalTree(plan, block, bin.getLeft()),
            createEvalTree(plan, block, bin.getRight()));

      // others
      case Column:
        return createFieldEval(plan, block, (ColumnReferenceExpr) expr);

      case CountRowsFunction: {
        FunctionDesc countRows = catalog.getFunction("count", FunctionType.AGGREGATION, new DataType[] {});

        try {
          block.setHasGrouping();

          return new AggregationFunctionCallEval(countRows, (AggFunction) countRows.newInstance(),
              new EvalNode[] {});
        } catch (InternalException e) {
          throw new UndefinedFunctionException(CatalogUtil.
              getCanonicalName(countRows.getSignature(), new DataType[]{}));
        }
      }
      case GeneralSetFunction: {
        GeneralSetFunctionExpr setFunction = (GeneralSetFunctionExpr) expr;
        Expr[] params = setFunction.getParams();
        EvalNode[] givenArgs = new EvalNode[params.length];
        DataType[] paramTypes = new DataType[params.length];

        FunctionType functionType = setFunction.isDistinct() ?
            FunctionType.DISTINCT_AGGREGATION : FunctionType.AGGREGATION;
        givenArgs[0] = createEvalTree(plan, block, params[0]);
        if (setFunction.getSignature().equalsIgnoreCase("count")) {
          paramTypes[0] = CatalogUtil.newSimpleDataType(TajoDataTypes.Type.ANY);
        } else {
          paramTypes[0] = givenArgs[0].getValueType();
        }

        if (!catalog.containFunction(setFunction.getSignature(), functionType, paramTypes)) {
          throw new UndefinedFunctionException(CatalogUtil. getCanonicalName(setFunction.getSignature(), paramTypes));
        }

        FunctionDesc funcDesc = catalog.getFunction(setFunction.getSignature(), functionType, paramTypes);
        if (!block.hasGroupbyNode()) {
          block.setHasGrouping();
        }
        try {
          return new AggregationFunctionCallEval(funcDesc, (AggFunction) funcDesc.newInstance(), givenArgs);
        } catch (InternalException e) {
          e.printStackTrace();
        }
      }
      break;

      case Function:
        FunctionExpr function = (FunctionExpr) expr;
        // Given parameters
        Expr[] params = function.getParams();
        if (params == null) {
            params = new Expr[1];
            params[0] = new NullValue();
        }

        EvalNode[] givenArgs = new EvalNode[params.length];
        DataType[] paramTypes = new DataType[params.length];

        for (int i = 0; i < params.length; i++) {
            givenArgs[i] = createEvalTree(plan, block, params[i]);
            paramTypes[i] = givenArgs[i].getValueType();
        }

        if (!catalog.containFunction(function.getSignature(), paramTypes)) {
            throw new UndefinedFunctionException(CatalogUtil.getCanonicalName(function.getSignature(), paramTypes));
        }

        FunctionDesc funcDesc = catalog.getFunction(function.getSignature(), paramTypes);

        try {

          FunctionType functionType = funcDesc.getFuncType();
          if (functionType == FunctionType.GENERAL || functionType == FunctionType.UDF) {
            return new GeneralFunctionEval(funcDesc, (GeneralFunction) funcDesc.newInstance(), givenArgs);
          } else if (functionType == FunctionType.AGGREGATION || functionType == FunctionType.UDA) {
            if (!block.hasGroupbyNode()) {
              block.setHasGrouping();
            }
            return new AggregationFunctionCallEval(funcDesc, (AggFunction) funcDesc.newInstance(), givenArgs);
          } else if (functionType == FunctionType.DISTINCT_AGGREGATION || functionType == FunctionType.DISTINCT_UDA) {
            throw new PlanningException("Unsupported function: " + funcDesc.toString());
          }
        } catch (InternalException e) {
          e.printStackTrace();
        }
        break;

      case CaseWhen:
        CaseWhenPredicate caseWhenExpr = (CaseWhenPredicate) expr;
        return createCaseWhenEval(plan, block, caseWhenExpr);

      case IsNullPredicate:
        IsNullPredicate nullPredicate = (IsNullPredicate) expr;
        return new IsNullEval(nullPredicate.isNot(),
            createEvalTree(plan, block, nullPredicate.getPredicand()));

      default:
    }
    return null;
  }

  private FieldEval createFieldEval(LogicalPlan plan, QueryBlock block,
                                    ColumnReferenceExpr columnRef) throws PlanningException {
    Column column = plan.resolveColumn(block, null, columnRef);
    return new FieldEval(column);
  }

  private static EvalType exprTypeToEvalType(OpType type) {
    switch (type) {
      case And: return EvalType.AND;
      case Or: return EvalType.OR;
      case Equals: return EvalType.EQUAL;
      case NotEquals: return EvalType.NOT_EQUAL;
      case LessThan: return EvalType.LTH;
      case LessThanOrEquals: return EvalType.LEQ;
      case GreaterThan: return EvalType.GTH;
      case GreaterThanOrEquals: return EvalType.GEQ;
      case Plus: return EvalType.PLUS;
      case Minus: return EvalType.MINUS;
      case Multiply: return EvalType.MULTIPLY;
      case Divide: return EvalType.DIVIDE;
      case Modular: return EvalType.MODULAR;
      case Concatenate: return EvalType.CONCATENATE;
      case Column: return EvalType.FIELD;
      case Function: return EvalType.FUNCTION;
      default: throw new RuntimeException("Unsupported type: " + type);
    }
  }

  public CaseWhenEval createCaseWhenEval(LogicalPlan plan, QueryBlock block,
                                              CaseWhenPredicate caseWhen) throws PlanningException {
    CaseWhenEval caseEval = new CaseWhenEval();
    EvalNode condition;
    EvalNode result;

    for (CaseWhenPredicate.WhenExpr when : caseWhen.getWhens()) {
      condition = createEvalTree(plan, block, when.getCondition());
      result = createEvalTree(plan, block, when.getResult());
      caseEval.addWhen(condition, result);
    }

    if (caseWhen.hasElseResult()) {
      caseEval.setElseResult(createEvalTree(plan, block, caseWhen.getElseResult()));
    }

    return caseEval;
  }

  Target[] annotateTargets(LogicalPlan plan, QueryBlock block, TargetExpr[] targets)
      throws PlanningException {
    Target annotatedTargets [] = new Target[targets.length];

    for (int i = 0; i < targets.length; i++) {
      annotatedTargets[i] = createTarget(plan, block, targets[i]);
    }
    return annotatedTargets;
  }

  Target createTarget(LogicalPlan plan, QueryBlock block,
                             TargetExpr target) throws PlanningException {
    if (target.hasAlias()) {
      return new Target(createEvalTree(plan, block, target.getExpr()),
          target.getAlias());
    } else {
      return new Target(createEvalTree(plan, block, target.getExpr()));
    }
  }

  /**
   * It transforms a list of targets to schema. If it contains anonymous targets, it names them.
   */
  static Schema getProjectedSchema(LogicalPlan plan, Target[] targets) {
    Schema projected = new Schema();
    for(Target t : targets) {
      DataType type = t.getEvalTree().getValueType();
      String name;
      if (t.hasAlias() || t.getEvalTree().getType() == EvalType.FIELD) {
        name = t.getCanonicalName();
      } else { // if an alias is not given or this target is an expression
        t.setAlias(plan.newNonameColumnName(t.getEvalTree().getName()));
        name = t.getAlias();
      }
      projected.addColumn(name,type);
    }

    return projected;
  }
}
