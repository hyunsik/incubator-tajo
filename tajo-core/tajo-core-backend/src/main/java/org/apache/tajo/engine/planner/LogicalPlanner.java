/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.tajo.engine.planner;

import com.google.common.collect.Lists;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.ContentSummary;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.tajo.algebra.*;
import org.apache.tajo.algebra.CreateTable.ColumnDefinition;
import org.apache.tajo.catalog.*;
import org.apache.tajo.catalog.partition.PartitionDesc;
import org.apache.tajo.catalog.partition.Specifier;
import org.apache.tajo.catalog.proto.CatalogProtos;
import org.apache.tajo.common.TajoDataTypes;
import org.apache.tajo.common.TajoDataTypes.DataType;
import org.apache.tajo.engine.eval.*;
import org.apache.tajo.engine.exception.InvalidQueryException;
import org.apache.tajo.engine.exception.VerifyException;
import org.apache.tajo.engine.planner.LogicalPlan.QueryBlock;
import org.apache.tajo.engine.planner.logical.*;
import org.apache.tajo.engine.utils.SchemaUtil;
import org.apache.tajo.util.TUtil;

import java.util.*;

import static org.apache.tajo.algebra.Aggregation.GroupType;
import static org.apache.tajo.algebra.CreateTable.ColumnPartition;
import static org.apache.tajo.algebra.CreateTable.PartitionType;
import static org.apache.tajo.engine.planner.ExprNormalizer.ExprNormalizedResult;
import static org.apache.tajo.engine.planner.LogicalPlan.BlockType;
import static org.apache.tajo.engine.planner.LogicalPlanPreprocessor.PreprocessContext;

/**
 * This class creates a logical plan from a parse tree ({@link org.apache.tajo.engine.parser.SQLAnalyzer})
 * generated by {@link org.apache.tajo.engine.parser.SQLAnalyzer}.
 *
 * Relational operators can be divided into two categories as follows:
 * <oi>
 *  <li>General operator: this type operators do not affect the tuple schema.
 *  Selection, Sort, and Limit belong to this type.</li>
 *  <li>Projectable operator: this type operators affects the tuple schema.
 *  Scan, Groupby, and Join belong to this type.
 *  </li>
 * </oi>
 */
public class LogicalPlanner extends BaseAlgebraVisitor<LogicalPlanner.PlanContext, LogicalNode> {
  private static Log LOG = LogFactory.getLog(LogicalPlanner.class);
  private final CatalogService catalog;
  private final LogicalPlanPreprocessor preprocessor;
  private final ExprAnnotator exprAnnotator;
  private final ExprNormalizer normalizer;

  public LogicalPlanner(CatalogService catalog) {
    this.catalog = catalog;
    this.exprAnnotator = new ExprAnnotator(catalog);
    this.preprocessor = new LogicalPlanPreprocessor(catalog, exprAnnotator);
    this.normalizer = new ExprNormalizer();
  }

  public class PlanContext {
    LogicalPlan plan;

    // transient data for each query block
    QueryBlock currentBlock;
    ExprListManager evalList;

    public PlanContext(LogicalPlan plan, QueryBlock block) {
      this.plan = plan;
      this.currentBlock = block;
      this.evalList = new ExprListManager(plan, LogicalPlanner.this, block);
    }

    public PlanContext(PlanContext context, QueryBlock block) {
      this.plan = context.plan;
      this.currentBlock = block;
      this.evalList = new ExprListManager(plan, LogicalPlanner.this, block);
    }
  }

  /**
   * This generates a logical plan.
   *
   * @param expr A relational algebraic expression for a query.
   * @return A logical plan
   */
  public LogicalPlan createPlan(Expr expr) throws PlanningException {

    LogicalPlan plan = new LogicalPlan();

    QueryBlock rootBlock = plan.newAndGetBlock(LogicalPlan.ROOT_BLOCK);
    PreprocessContext preProcessorCtx = new PreprocessContext(plan, rootBlock);
    preprocessor.visit(preProcessorCtx, new Stack<Expr>(), expr);

    PlanContext context = new PlanContext(plan, plan.getRootBlock());
    LogicalNode topMostNode = this.visit(context, new Stack<Expr>(), expr);

    // Add Root Node
    LogicalRootNode root = new LogicalRootNode(plan.newPID());
    root.setInSchema(topMostNode.getOutSchema());
    root.setOutSchema(topMostNode.getOutSchema());
    root.setChild(topMostNode);
    plan.getRootBlock().setRoot(root);

    return plan;
  }

  public LogicalNode postHook(PlanContext context, Stack<Expr> stack, Expr expr, LogicalNode current)
      throws PlanningException {
    // Post work
    if ((expr.getType() == OpType.RelationList && ((RelationList) expr).size() == 1)
        || expr.getType() == OpType.Having) {
      return current;
    }

    // mark the node as the visited node and do post work for each operator
    context.currentBlock.postVisit(current, expr, stack);

    return current;
  }

  /*===============================================================================================
    Data Manupulation Language (DML) SECTION
   ===============================================================================================*/


  /*===============================================================================================
    PROJECTION SECTION
   ===============================================================================================*/
  @Override
  public LogicalNode visitProjection(PlanContext context, Stack<Expr> stack, Projection projection)
      throws PlanningException {

    //1: init Phase
    LogicalPlan plan = context.plan;
    QueryBlock block = context.currentBlock;

    String [] targetNames;
    if (projection.isAllProjected()) {
      targetNames = null;
    } else {
      targetNames = new String[projection.size()];
      context.evalList = new ExprListManager(plan, this, context.currentBlock);
      ExprNormalizedResult normalized;
      TargetExpr rawTarget;
      for (int i = 0; i < projection.getTargets().length; i++) {
        rawTarget = projection.getTargets()[i];

        if (PlannerUtil.existsAggregationFunction(rawTarget)) {
          block.setHasGrouping();
        }

        // dissect an expression into more parts (at most dissected into three parts)
        normalized = normalizer.normalize(context, rawTarget.getExpr());

        // Get all projecting references
        if (rawTarget.hasAlias()) {
          targetNames[i] = context.evalList.addTargetExpr(new TargetExpr(normalized.outer, rawTarget.getAlias()));
        } else {
          targetNames[i] = context.evalList.addExpr(normalized.outer);
        }

        // Add sub-expressions from dissected parts.
        context.evalList.addTargetExprArray(normalized.aggregation);
        context.evalList.addTargetExprArray(normalized.inner);
      }
    }

    // When a select statement with from clause is given
    if (!projection.hasChild()) {
      EvalExprNode evalOnly = new EvalExprNode(context.plan.newPID(), annotateTargets(plan, block,
          projection.getTargets()));
      evalOnly.setOutSchema(getProjectedSchema(plan, evalOnly.getExprs()));
      block.setProjectionNode(evalOnly);
      return evalOnly;
    }

    // Build Child Plans
    stack.push(projection);
    LogicalNode child = visit(context, stack, projection.getChild());
    if (projection.isAllProjected()) {
      targetNames = PlannerUtil.schemaToReferenceNames(child.getOutSchema());
    }
    // check if it is aggregation query without group-by clause. If so, it inserts group-by node to its child.
    child = insertGroupbyNodeIfUnresolved(plan, block, context.evalList, child, targetNames, stack);
    stack.pop();

    ProjectionNode projectionNode;
    Target [] targets;
    if (projection.isAllProjected()) {
      targets = PlannerUtil.schemaToTargets(child.getOutSchema());
    } else {
      targets = buildTargets(plan, block, context.evalList, targetNames);
    }

    projectionNode = new ProjectionNode(context.plan.newPID());
    block.setProjectionNode(projectionNode);
    projectionNode.setTargets(targets);
    projectionNode.setOutSchema(getProjectedSchema(plan, projectionNode.getTargets()));
    projectionNode.setInSchema(child.getOutSchema());
    projectionNode.setChild(child);

    if (projection.isDistinct() && block.hasNode(NodeType.GROUP_BY)) {
      throw new VerifyException("Cannot support grouping and distinct at the same time");
    } else {
      if (projection.isDistinct()) {
        Schema outSchema = projectionNode.getOutSchema();
        GroupbyNode dupRemoval = new GroupbyNode(plan.newPID());
        dupRemoval.setGroupingColumns(outSchema.toArray());
        dupRemoval.setTargets(PlannerUtil.schemaToTargets(outSchema));
        dupRemoval.setInSchema(outSchema);
        dupRemoval.setOutSchema(outSchema);
        dupRemoval.setChild(child);
        projectionNode.setChild(dupRemoval);
      }
    }

    return projectionNode;
  }

  /**
   * It transforms a list of targets to schema. If it contains anonymous targets, it names them.
   */
  static Schema getProjectedSchema(LogicalPlan plan, Target[] targets) {
    Schema projected = new Schema();
    for(Target t : targets) {
      DataType type = t.getEvalTree().getValueType();
      String name;
      if (t.hasAlias() || t.getEvalTree().getType() == EvalType.FIELD) {
        name = t.getCanonicalName();
      } else { // if an alias is not given or this target is an expression
        t.setAlias(plan.newQueryBlock(t.getEvalTree().getName()));
        name = t.getAlias();
      }
      projected.addColumn(name,type);
    }

    return projected;
  }

  private Target [] buildTargets(LogicalPlan plan, QueryBlock block, ExprListManager evalLists, String[] referenceNames)
      throws PlanningException {
    Target [] targets = new Target[referenceNames.length];
    for (int i = 0; i < referenceNames.length; i++) {
      if (evalLists.isResolved(referenceNames[i])) {
        targets[i] = evalLists.getTarget(referenceNames[i]);
      } else {
        EvalNode evalNode = exprAnnotator.createEvalNode(plan, block,
            evalLists.getRawTarget(referenceNames[i]).getExpr());
        targets[i] = new Target(evalNode, referenceNames[i]);
        evalLists.switchTarget(referenceNames[i], evalNode);
      }
    }
    return targets;
  }

  /**
   * Insert a group-by operator before a sort or a projection operator.
   * It is used only when a group-by clause is not given.
   */
  private LogicalNode insertGroupbyNodeIfUnresolved(LogicalPlan plan, QueryBlock block, ExprListManager evalLists,
                                                    LogicalNode child, String [] targetNames,
                                                    Stack<Expr> stack) throws PlanningException {

    if (!block.isGroupingResolved()) {
      GroupbyNode groupbyNode = new GroupbyNode(plan.newPID());
      groupbyNode.setGroupingColumns(new Column[] {});
      Target [] targets = new Target[block.getProjection().size()];
      for (int i = 0; i < block.getProjection().size(); i++) {
        targets[i] = evalLists.getTarget(targetNames[i]);
        if (targets[i] == null) {
          EvalNode evalNode = exprAnnotator.createEvalNode(plan, block, evalLists.getRawTarget(targetNames[i]).getExpr());
          targets[i] = new Target(evalNode, targetNames[i]);
          evalLists.switchTarget(targetNames[i], targets[i].getEvalTree());
        }
      }
      groupbyNode.setTargets(targets);
      groupbyNode.setChild(child);
      groupbyNode.setInSchema(child.getOutSchema());
      groupbyNode.setOutSchema(PlannerUtil.targetToSchema(targets));

      block.postVisit(groupbyNode, null, stack);
      return groupbyNode;
    } else {
      return child;
    }
  }

  private boolean isNoUpperProjection(Stack<Expr> stack) {
    for (Expr expr : stack) {
      OpType type = expr.getType();
      if (!( (type == OpType.Projection) || (type == OpType.Aggregation) || (type == OpType.Join) )) {
        return false;
      }
    }

    return true;
  }






  Target[] annotateTargets(LogicalPlan plan, QueryBlock block, TargetExpr[] targets)
      throws PlanningException {
    Target annotatedTargets [] = new Target[targets.length];

    for (int i = 0; i < targets.length; i++) {
      annotatedTargets[i] = createTarget(plan, block, targets[i]);
    }
    return annotatedTargets;
  }

  Target createTarget(LogicalPlan plan, QueryBlock block,
                      TargetExpr target) throws PlanningException {
    if (target.hasAlias()) {
      return new Target(exprAnnotator.createEvalNode(plan, block, target.getExpr()),
          target.getAlias());
    } else {
      return new Target(exprAnnotator.createEvalNode(plan, block, target.getExpr()));
    }
  }

  /*===============================================================================================
    SORT SECTION
  ===============================================================================================*/
  @Override
  public LimitNode visitLimit(PlanContext context, Stack<Expr> stack, Limit limit) throws PlanningException {
    // 1. Init Phase:
    LogicalPlan plan = context.plan;
    QueryBlock block = context.currentBlock;

    // build child plans
    stack.push(limit);
    LogicalNode child = visit(context, stack, limit.getChild());
    stack.pop();

    // build limit plan
    EvalNode firstFetchNum = exprAnnotator.createEvalNode(plan, block, limit.getFetchFirstNum());
    firstFetchNum.eval(null, null, null);
    LimitNode limitNode = new LimitNode(context.plan.newPID());
    limitNode.setFetchFirst(firstFetchNum.terminate(null).asInt8());

    // set child plan and update input/output schemas.
    limitNode.setChild(child);
    limitNode.setInSchema(child.getOutSchema());
    limitNode.setOutSchema(child.getOutSchema());
    return limitNode;
  }

  @Override
  public SortNode visitSort(PlanContext context, Stack<Expr> stack, Sort sort) throws PlanningException {
    int sortKeyNum = sort.getSortSpecs().length;
    Sort.SortSpec[] sortSpecs = sort.getSortSpecs();
    String [] sortKeyNames = new String[sortKeyNum];

    for (int i = 0; i < sortKeyNum; i++) {
      ExprNormalizedResult normalized = normalizer.normalize(context, sortSpecs[i].getKey());
      sortKeyNames[i] = context.evalList.addExpr(normalized.outer);
      context.evalList.addTargetExprArray(normalized.aggregation);
      context.evalList.addTargetExprArray(normalized.inner);
    }

    // 2. Build Child Plans:
    stack.push(sort);
    LogicalNode child = visit(context, stack, sort.getChild());
    //child = insertGroupbyNodeIfUnresolved(plan, block, child, stack);
    stack.pop();

    // 3. Build this plan:
    SortSpec[] annotatedSortSpecs = new SortSpec[sortKeyNum];
    Column column = null;
    for (int i = 0; i < sort.getSortSpecs().length; i++) {
      if (context.evalList.isResolved(sortKeyNames[i])) {
        column = context.evalList.getTarget(sortKeyNames[i]).getColumnSchema();
        annotatedSortSpecs[i] = new SortSpec(column, sortSpecs[i].isAscending(), sortSpecs[i].isNullFirst());
      } else {
        throw new PlanningException(">>>>>>>>>>>>>>>>>>>>.");
      }
    }
    SortNode sortNode = new SortNode(context.plan.newPID());
    sortNode.setSortSpecs(annotatedSortSpecs);

    // 4. Set Child Plan, Update Input/Output Schemas:
    sortNode.setChild(child);
    sortNode.setInSchema(child.getOutSchema());
    sortNode.setOutSchema(child.getOutSchema());

    return sortNode;
  }

  /*===============================================================================================
    GROUP BY SECTION
   ===============================================================================================*/

  @Override
  public LogicalNode visitGroupBy(PlanContext context, Stack<Expr> stack, Aggregation aggregation)
      throws PlanningException {

    // Initialization Phase:
    LogicalPlan plan = context.plan;
    QueryBlock block = context.currentBlock;

    String [] groupingSets = context.evalList.addExprArray(aggregation.getGroupSet()[0].getGroupingSets());

    // 2. Build Child Plan Phase:
    stack.push(aggregation);
    LogicalNode child = visit(context, stack, aggregation.getChild());
    stack.pop();

    Set<Target> evaluatedTargets = new LinkedHashSet<Target>();
    for (TargetExpr rawTarget : context.evalList.getRawTargets()) {
      try {
        EvalNode evalNode = exprAnnotator.createEvalNode(context.plan, context.currentBlock, rawTarget.getExpr());
        if (EvalTreeUtil.findDistinctAggFunction(evalNode).size() > 0) {
          context.evalList.switchTarget(rawTarget.getAlias(), evalNode);
          evaluatedTargets.add(new Target(evalNode, rawTarget.getAlias()));
        }
      } catch (VerifyException ve) {
      }
    }

    // 3. Build This Plan:
    Aggregation.GroupElement [] groupElements = aggregation.getGroupSet();

    if (groupElements[0].getType() == GroupType.OrdinaryGroup) { // for group-by
      Column [] groupingColumns = new Column[aggregation.getGroupSet()[0].getGroupingSets().length];
      for (int i = 0; i < groupingColumns.length; i++) {
        if (context.evalList.isResolved(groupingSets[i])) {
          groupingColumns[i] = context.evalList.getTarget(groupingSets[i]).getColumnSchema();
        } else {
          throw new PlanningException("AAAAAAAAAAAAAAAAAAA");
        }
      }

      GroupbyNode groupingNode = new GroupbyNode(plan.newPID());
      groupingNode.setGroupingColumns(groupingColumns);
      if (aggregation.hasHavingCondition()) {
        groupingNode.setHavingCondition(
            exprAnnotator.createEvalNode(plan, block, aggregation.getHavingCondition()));
      }

      List<Target> targets = new ArrayList<Target>();

      for (Column column : groupingColumns) {
        if (child.getOutSchema().contains(column)) {
          targets.add(new Target(new FieldEval(child.getOutSchema().getColumn(column))));
        }
      }
      targets.addAll(evaluatedTargets);
      groupingNode.setTargets(targets.toArray(new Target[targets.size()]));
      // 4. Set Child Plan and Update Input Schemes Phase
      groupingNode.setChild(child);
      block.setNode(groupingNode);
      groupingNode.setInSchema(child.getOutSchema());
      groupingNode.setOutSchema(PlannerUtil.targetToSchema(groupingNode.getTargets()));

      // 5. Update Output Schema and Targets for Upper Plan

      return groupingNode;

    } else {
      throw new InvalidQueryException("Not support grouping");
    }
  }

  public static final Column[] ALL= Lists.newArrayList().toArray(new Column[0]);

  public static List<Column[]> generateCuboids(Column[] columns) {
    int numCuboids = (int) Math.pow(2, columns.length);
    int maxBits = columns.length;

    List<Column[]> cube = Lists.newArrayList();
    List<Column> cuboidCols;

    cube.add(ALL);
    for (int cuboidId = 1; cuboidId < numCuboids; cuboidId++) {
      cuboidCols = Lists.newArrayList();
      for (int j = 0; j < maxBits; j++) {
        int bit = 1 << j;
        if ((cuboidId & bit) == bit) {
          cuboidCols.add(columns[j]);
        }
      }
      cube.add(cuboidCols.toArray(new Column[cuboidCols.size()]));
    }
    return cube;
  }

  @Override
  public SelectionNode visitFilter(PlanContext context, Stack<Expr> stack, Selection selection)
      throws PlanningException {
    // 1. init phase:
    LogicalPlan plan = context.plan;
    QueryBlock block = context.currentBlock;

    String qualName = context.evalList.addExpr(selection.getQual());

    // 2. build child plans:
    stack.push(selection);
    LogicalNode child = visit(context, stack, selection.getChild());
    stack.pop();

    Target target = context.evalList.getTarget(qualName);
    EvalNode evalNode;
    if (target == null) {
      evalNode = exprAnnotator.createEvalNode(plan, block, selection.getQual());
      context.evalList.switchTarget(qualName, evalNode);
    } else {
      evalNode = target.getEvalTree();
    }
    // 3. build this plan:
    EvalNode searchCondition = evalNode;
    EvalNode simplified = AlgebraicUtil.eliminateConstantExprs(searchCondition);
    SelectionNode selectionNode = context.currentBlock.getNodeFromExpr(selection);
    selectionNode.setQual(simplified);

    // 4. set child plan, update input/output schemas:
    selectionNode.setChild(child);
    selectionNode.setInSchema(child.getOutSchema());
    selectionNode.setOutSchema(child.getOutSchema());

    // 5. update block information:
    block.setNode(selectionNode);

    return selectionNode;
  }

  /*===============================================================================================
    JOIN SECTION
   ===============================================================================================*/

  @Override
  public LogicalNode visitJoin(PlanContext context, Stack<Expr> stack, Join join)
      throws PlanningException {
    // Phase 1: Init
    LogicalPlan plan = context.plan;
    QueryBlock block = context.currentBlock;

    // Phase 2: build child plans
    stack.push(join);
    LogicalNode left = visit(context, stack, join.getLeft());
    LogicalNode right = visit(context, stack, join.getRight());
    stack.pop();

    // Phase 3: build this plan
    JoinNode joinNode = new JoinNode(plan.newPID(), join.getJoinType(), left, right);

    // Set A merged input schema
    Schema merged;
    if (join.isNatural()) {
      merged = getNaturalJoin(left, right);
    } else {
      merged = SchemaUtil.merge(left.getOutSchema(), right.getOutSchema());
    }
    joinNode.setInSchema(merged);
    joinNode.setOutSchema(merged);

    // Determine join conditions
    if (join.isNatural()) { // if natural join, it should have the equi-join conditions by common column names
      Schema leftSchema = joinNode.getLeftChild().getInSchema();
      Schema rightSchema = joinNode.getRightChild().getInSchema();
      Schema commons = SchemaUtil.getCommons(leftSchema, rightSchema);
      EvalNode njCond = getNaturalJoinCondition(leftSchema, rightSchema, commons);
      joinNode.setJoinQual(njCond);
    } else if (join.hasQual()) { // otherwise, the given join conditions are set
      joinNode.setJoinQual(exprAnnotator.createEvalNode(plan, block, join.getQual()));
    }

    return joinNode;
  }

  private static Schema getNaturalJoin(LogicalNode outer, LogicalNode inner) {
    Schema joinSchema = new Schema();
    Schema commons = SchemaUtil.getCommons(outer.getOutSchema(),
        inner.getOutSchema());
    joinSchema.addColumns(commons);
    for (Column c : outer.getOutSchema().getColumns()) {
      for (Column common : commons.getColumns()) {
        if (!common.getColumnName().equals(c.getColumnName())) {
          joinSchema.addColumn(c);
        }
      }
    }

    for (Column c : inner.getOutSchema().getColumns()) {
      for (Column common : commons.getColumns()) {
        if (!common.getColumnName().equals(c.getColumnName())) {
          joinSchema.addColumn(c);
        }
      }
    }
    return joinSchema;
  }

  private static EvalNode getNaturalJoinCondition(Schema outer, Schema inner, Schema commons) {
    EvalNode njQual = null;
    EvalNode equiQual;

    Column leftJoinKey;
    Column rightJoinKey;
    for (Column common : commons.getColumns()) {
      leftJoinKey = outer.getColumnByName(common.getColumnName());
      rightJoinKey = inner.getColumnByName(common.getColumnName());
      equiQual = new BinaryEval(EvalType.EQUAL,
          new FieldEval(leftJoinKey), new FieldEval(rightJoinKey));
      if (njQual == null) {
        njQual = equiQual;
      } else {
        njQual = new BinaryEval(EvalType.AND,
            njQual, equiQual);
      }
    }

    return njQual;
  }

  private static LogicalNode createCatasianProduct(LogicalPlan plan, LogicalNode left, LogicalNode right) {
    JoinNode join = new JoinNode(plan.newPID(), JoinType.CROSS, left, right);
    Schema joinSchema = SchemaUtil.merge(
        join.getLeftChild().getOutSchema(),
        join.getRightChild().getOutSchema());
    join.setInSchema(joinSchema);
    join.setOutSchema(joinSchema);

    return join;
  }

  @Override
  public LogicalNode visitRelationList(PlanContext context, Stack<Expr> stack, RelationList relations)
      throws PlanningException {

    LogicalNode current = visit(context, stack, relations.getRelations()[0]);

    LogicalNode left;
    LogicalNode right;
    if (relations.size() > 1) {

      for (int i = 1; i < relations.size(); i++) {
        left = current;
        right = visit(context, stack, relations.getRelations()[i]);
        current = createCatasianProduct(context.plan, left, right);
      }
    }

    return current;
  }

  @Override
  public ScanNode visitRelation(PlanContext context, Stack<Expr> stack, Relation expr)
      throws PlanningException {
    ScanNode scanNode = context.currentBlock.getNodeFromExpr(expr);

    // set targets
    Set<Target> evaluatedTargets = new LinkedHashSet<Target>();
    for (TargetExpr rawTarget : context.evalList.getRawTargets()) {
      try {
        EvalNode evalNode = exprAnnotator.createEvalNode(context.plan, context.currentBlock, rawTarget.getExpr());
        if (PlannerUtil.canBeEvaluated(evalNode, scanNode) && EvalTreeUtil.findDistinctAggFunction(evalNode).size() == 0) {
          context.evalList.switchTarget(rawTarget.getAlias(), evalNode);
          evaluatedTargets.add(new Target(evalNode, rawTarget.getAlias()));
        }
      } catch (VerifyException ve) {
      }
    }

    // Assume that each unique expr is evaluated once.
    List<Target> targets = new ArrayList<Target>();
    for (Column column : scanNode.getInSchema().getColumns()) {
      ColumnReferenceExpr columnRef = new ColumnReferenceExpr(column.getQualifier(), column.getColumnName());
      if (context.evalList.containsExpr(columnRef) == false) {
        targets.add(new Target(new FieldEval(column)));
      }
    }
    targets.addAll(evaluatedTargets);
    scanNode.setTargets(targets.toArray(new Target[targets.size()]));
    scanNode.setOutSchema(PlannerUtil.targetToSchema(scanNode.getTargets()));

    return scanNode;
  }

  private void updatePhysicalInfo(TableDesc desc) {
    if (desc.getPath() != null) {
      try {
        FileSystem fs = desc.getPath().getFileSystem(new Configuration());
        FileStatus status = fs.getFileStatus(desc.getPath());
        if (desc.getStats() != null && (status.isDirectory() || status.isFile())) {
          ContentSummary summary = fs.getContentSummary(desc.getPath());
          if (summary != null) {
            long volume = summary.getLength();
            desc.getStats().setNumBytes(volume);
          }
        }
      } catch (Throwable t) {
        LOG.warn(t);
      }
    }
  }

  public TableSubQueryNode visitTableSubQuery(PlanContext context, Stack<Expr> stack, TablePrimarySubQuery expr)
      throws PlanningException {
    QueryBlock childBlock = context.plan.getBlock(context.plan.getBlockNameByExpr(expr.getSubQuery()));
    PlanContext newContext = new PlanContext(context, childBlock);
    LogicalNode child = visit(newContext, new Stack<Expr>(), expr.getSubQuery());
    TableSubQueryNode subQueryNode = context.currentBlock.getNodeFromExpr(expr);
    context.plan.connectBlocks(childBlock, context.currentBlock, BlockType.TableSubQuery);
    subQueryNode.setSubQuery(child);


    // set targets
    Set<Target> evaluatedTargets = new LinkedHashSet<Target>();
    for (TargetExpr rawTarget : context.evalList.getRawTargets()) {
      try {
        EvalNode evalNode = exprAnnotator.createEvalNode(context.plan, context.currentBlock, rawTarget.getExpr());
        if (PlannerUtil.canBeEvaluated(evalNode, subQueryNode)
            && EvalTreeUtil.findDistinctAggFunction(evalNode).size() == 0) {
          context.evalList.switchTarget(rawTarget.getAlias(), evalNode);
          evaluatedTargets.add(new Target(evalNode, rawTarget.getAlias()));
        }
      } catch (VerifyException ve) {
      }
    }

    // Assume that each unique expr is evaluated once.
    List<Target> targets = new ArrayList<Target>();
    for (Column column : subQueryNode.getOutSchema().getColumns()) {
      ColumnReferenceExpr columnRef = new ColumnReferenceExpr(column.getQualifier(), column.getColumnName());
      if (context.evalList.containsExpr(columnRef) == false) {
        targets.add(new Target(new FieldEval(column)));
      }
    }
    targets.addAll(evaluatedTargets);
    subQueryNode.setTargets(targets.toArray(new Target[targets.size()]));
    subQueryNode.setOutSchema(PlannerUtil.targetToSchema(subQueryNode.getTargets()));

    return subQueryNode;
  }

    /*===============================================================================================
    SET OPERATION SECTION
   ===============================================================================================*/

  @Override
  public LogicalNode visitUnion(PlanContext context, Stack<Expr> stack, SetOperation setOperation)
      throws PlanningException {
    return buildSetPlan(context, stack, setOperation);
  }

  @Override
  public LogicalNode visitExcept(PlanContext context, Stack<Expr> stack, SetOperation setOperation)
      throws PlanningException {
    return buildSetPlan(context, stack, setOperation);
  }

  @Override
  public LogicalNode visitIntersect(PlanContext context, Stack<Expr> stack, SetOperation setOperation)
      throws PlanningException {
    return buildSetPlan(context, stack, setOperation);
  }

  private LogicalNode buildSetPlan(PlanContext context, Stack<Expr> stack, SetOperation setOperation)
      throws PlanningException {

    // 1. Init Phase
    LogicalPlan plan = context.plan;
    QueryBlock block = context.currentBlock;

    // 2. Build Child Plans
    PlanContext leftContext = new PlanContext(context, plan.newQueryBlock());
    Stack<Expr> leftStack = new Stack<Expr>();
    LogicalNode left = visit(leftContext, leftStack, setOperation.getLeft());
    TableSubQueryNode leftSubQuery = new TableSubQueryNode(plan.newPID(), leftContext.currentBlock.getName(), left);
    context.plan.connectBlocks(leftContext.currentBlock, context.currentBlock, BlockType.TableSubQuery);

    PlanContext rightContext = new PlanContext(context, plan.newQueryBlock());
    Stack<Expr> rightStack = new Stack<Expr>();
    LogicalNode right = visit(rightContext, rightStack, setOperation.getRight());
    TableSubQueryNode rightSubQuery = new TableSubQueryNode(plan.newPID(), rightContext.currentBlock.getName(), right);
    context.plan.connectBlocks(rightContext.currentBlock, context.currentBlock, BlockType.TableSubQuery);

    BinaryNode setOp;
    if (setOperation.getType() == OpType.Union) {
      setOp = new UnionNode(plan.newPID(), leftSubQuery, rightSubQuery);
    } else if (setOperation.getType() == OpType.Except) {
      setOp = new ExceptNode(plan.newPID(), leftSubQuery, rightSubQuery);
    } else if (setOperation.getType() == OpType.Intersect) {
      setOp = new IntersectNode(plan.newPID(), leftSubQuery, rightSubQuery);
    } else {
      throw new VerifyException("Invalid Type: " + setOperation.getType());
    }

    // Strip the table names from the targets of the both blocks
    // in order to check the equivalence the schemas of both blocks.
    Target [] leftStrippedTargets = PlannerUtil.stripTarget(leftContext.currentBlock.getCurrentTargets());

    Schema outSchema = PlannerUtil.targetToSchema(leftStrippedTargets);
    setOp.setInSchema(leftSubQuery.getOutSchema());
    setOp.setOutSchema(outSchema);

    if (isNoUpperProjection(stack)) {
      context.evalList = new ExprListManager(plan, this, leftContext.currentBlock);
//      block.targetListManager.resolveAll();
//      block.setSchema(block.targetListManager.getUpdatedSchema());
    }

    return setOp;
  }

  /*===============================================================================================
    INSERT SECTION
   ===============================================================================================*/

  public LogicalNode visitInsert(PlanContext context, Stack<Expr> stack, Insert expr) throws PlanningException {
    stack.push(expr);
    QueryBlock newQueryBlock = context.plan.newQueryBlock();
    PlanContext newContext = new PlanContext(context, newQueryBlock);
    Stack<Expr> subStack = new Stack<Expr>();
    LogicalNode subQuery = visit(newContext, subStack, expr.getSubQuery());
    context.plan.connectBlocks(newQueryBlock, context.currentBlock, BlockType.TableSubQuery);
    stack.pop();

    InsertNode insertNode = null;
    if (expr.hasTableName()) {
      TableDesc desc = catalog.getTableDesc(expr.getTableName());
      context.currentBlock.addRelation(new ScanNode(context.plan.newPID(), desc));

      Schema targetSchema = new Schema();
      if (expr.hasTargetColumns()) {
        // INSERT OVERWRITE INTO TABLE tbl(col1 type, col2 type) SELECT ...
        String [] targetColumnNames = expr.getTargetColumns();
        for (int i = 0; i < targetColumnNames.length; i++) {
          Column targetColumn = context.plan.resolveColumn(context.currentBlock,
              new ColumnReferenceExpr(targetColumnNames[i]));
          targetSchema.addColumn(targetColumn);
        }
      } else {
        // use the output schema of select clause as target schema
        // if didn't specific target columns like the way below,
        // INSERT OVERWRITE INTO TABLE tbl SELECT ...
        Schema targetTableSchema = desc.getSchema();
        for (int i = 0; i < subQuery.getOutSchema().getColumnNum(); i++) {
          targetSchema.addColumn(targetTableSchema.getColumn(i));
        }
      }

      insertNode = new InsertNode(context.plan.newPID(), desc, subQuery);
      insertNode.setTargetSchema(targetSchema);
      insertNode.setOutSchema(targetSchema);
    }

    if (expr.hasLocation()) {
      insertNode = new InsertNode(context.plan.newPID(), new Path(expr.getLocation()), subQuery);
      if (expr.hasStorageType()) {
        insertNode.setStorageType(CatalogUtil.getStoreType(expr.getStorageType()));
      }
      if (expr.hasParams()) {
        Options options = new Options();
        options.putAll(expr.getParams());
        insertNode.setOptions(options);
      }
    }

    insertNode.setOverwrite(expr.isOverwrite());

    return insertNode;
  }

  /*===============================================================================================
    Data Definition Language (DDL) SECTION
   ===============================================================================================*/

  @Override
  public LogicalNode visitCreateTable(PlanContext context, Stack<Expr> stack, CreateTable expr)
      throws PlanningException {

    String tableName = expr.getTableName();

    if (expr.hasSubQuery()) {
      stack.add(expr);
      LogicalNode subQuery = visit(context, stack, expr.getSubQuery());
      stack.pop();
      StoreTableNode storeNode = new StoreTableNode(context.plan.newPID(), tableName);
      storeNode.setCreateTable();
      storeNode.setChild(subQuery);

      storeNode.setInSchema(subQuery.getOutSchema());
      if(!expr.hasTableElements()) {
        // CREATE TABLE tbl AS SELECT ...
        expr.setTableElements(convertSchemaToTableElements(subQuery.getOutSchema()));
      }
      // else CREATE TABLE tbl(col1 type, col2 type) AS SELECT ...
      storeNode.setOutSchema(convertTableElementsSchema(expr.getTableElements()));

      if (expr.hasStorageType()) {
        storeNode.setStorageType(CatalogUtil.getStoreType(expr.getStorageType()));
      } else {
        // default type
        storeNode.setStorageType(CatalogProtos.StoreType.CSV);
      }

      if (expr.hasParams()) {
        Options options = new Options();
        options.putAll(expr.getParams());
        storeNode.setOptions(options);
      }

      if (expr.hasPartition()) {
        storeNode.setPartitions(convertTableElementsPartition(context, expr));
      }

      return storeNode;
    } else {
      Schema tableSchema;
      boolean mergedPartition = false;
      if (expr.hasPartition()) {
        if (expr.getPartition().getPartitionType().equals(PartitionType.COLUMN)) {
          if (((ColumnPartition)expr.getPartition()).isOmitValues()) {
            mergedPartition = true;
          }
        } else {
          throw new PlanningException(String.format("Not supported PartitonType: %s",
              expr.getPartition().getPartitionType()));
        }
      }

      if (mergedPartition) {
        ColumnDefinition [] merged = TUtil.concat(expr.getTableElements(),
            ((ColumnPartition)expr.getPartition()).getColumns());
        tableSchema = convertTableElementsSchema(merged);
      } else {
        tableSchema = convertTableElementsSchema(expr.getTableElements());
      }

      CreateTableNode createTableNode = new CreateTableNode(
          context.plan.newPID(),
          expr.getTableName(),
          tableSchema);

      if (expr.isExternal()) {
        createTableNode.setExternal(true);
      }

      if (expr.hasStorageType()) {
        createTableNode.setStorageType(CatalogUtil.getStoreType(expr.getStorageType()));
      } else {
        // default type
        // TODO - it should be configurable.
        createTableNode.setStorageType(CatalogProtos.StoreType.CSV);
      }

      if (expr.hasParams()) {
        Options options = new Options();
        options.putAll(expr.getParams());
        createTableNode.setOptions(options);
      }

      if (expr.hasLocation()) {
        createTableNode.setPath(new Path(expr.getLocation()));
      }

      if (expr.hasPartition()) {
        if (expr.getPartition().getPartitionType().equals(PartitionType.COLUMN)) {
          createTableNode.setPartitions(convertTableElementsPartition(context, expr));
        } else {
          throw new PlanningException(String.format("Not supported PartitonType: %s",
              expr.getPartition().getPartitionType()));
        }
      }

      return createTableNode;
    }
  }

  /**
   * convert table elements into Partition.
   *
   * @param context
   * @param expr
   * @return
   * @throws PlanningException
   */
  private PartitionDesc convertTableElementsPartition(PlanContext context,
                                                      CreateTable expr) throws PlanningException {
    Schema schema = convertTableElementsSchema(expr.getTableElements());
    PartitionDesc partitionDesc = null;
    List<Specifier> specifiers = null;
    if (expr.hasPartition()) {
      partitionDesc = new PartitionDesc();
      specifiers = TUtil.newList();

      partitionDesc.setPartitionsType(CatalogProtos.PartitionsType.valueOf(expr.getPartition()
          .getPartitionType().name()));

      if (expr.getPartition().getPartitionType().equals(PartitionType.HASH)) {
        CreateTable.HashPartition hashPartition = expr.getPartition();

        partitionDesc.setColumns(convertTableElementsColumns(expr.getTableElements()
            , hashPartition.getColumns()));

        if (hashPartition.getColumns() != null) {
          if (hashPartition.getQuantifier() != null) {
            String quantity = ((LiteralValue)hashPartition.getQuantifier()).getValue();
            partitionDesc.setNumPartitions(Integer.parseInt(quantity));
          }

          if (hashPartition.getSpecifiers() != null) {
            for(CreateTable.PartitionSpecifier eachSpec: hashPartition.getSpecifiers()) {
              specifiers.add(new Specifier(eachSpec.getName()));
            }
          }

          if (specifiers.isEmpty() && partitionDesc.getNumPartitions() > 0) {
            for (int i = 0; i < partitionDesc.getNumPartitions(); i++) {
              String partitionName = partitionDesc.getPartitionsType().name() + "_" + expr
                  .getTableName() + "_" + i;
              specifiers.add(new Specifier(partitionName));
            }
          }

          if (!specifiers.isEmpty())
            partitionDesc.setSpecifiers(specifiers);
        }
      } else if (expr.getPartition().getPartitionType().equals(PartitionType.LIST)) {
        CreateTable.ListPartition listPartition = expr.getPartition();

        partitionDesc.setColumns(convertTableElementsColumns(expr.getTableElements()
            , listPartition.getColumns()));

        if (listPartition.getSpecifiers() != null) {
          StringBuffer sb = new StringBuffer();

          for(CreateTable.ListPartitionSpecifier eachSpec: listPartition.getSpecifiers()) {
            Specifier specifier = new Specifier(eachSpec.getName());
            sb.delete(0, sb.length());
            for(Expr eachExpr : eachSpec.getValueList().getValues()) {
              context.currentBlock.setSchema(schema);
              EvalNode eval = exprAnnotator.createEvalNode(context.plan, context.currentBlock, eachExpr);
              if(sb.length() > 1)
                sb.append(",");

              sb.append(eval.toString());
            }
            specifier.setExpressions(sb.toString());
            specifiers.add(specifier);
          }
          if (!specifiers.isEmpty())
            partitionDesc.setSpecifiers(specifiers);
        }
      } else if (expr.getPartition().getPartitionType().equals(PartitionType.RANGE)) {
        CreateTable.RangePartition rangePartition = expr.getPartition();

        partitionDesc.setColumns(convertTableElementsColumns(expr.getTableElements()
            , rangePartition.getColumns()));

        if (rangePartition.getSpecifiers() != null) {
          for(CreateTable.RangePartitionSpecifier eachSpec: rangePartition.getSpecifiers()) {
            Specifier specifier = new Specifier();

            if (eachSpec.getName() != null)
              specifier.setName(eachSpec.getName());

            if (eachSpec.getEnd() != null) {
              context.currentBlock.setSchema(schema);
              EvalNode eval = exprAnnotator.createEvalNode(context.plan, context.currentBlock, eachSpec.getEnd());
              specifier.setExpressions(eval.toString());
            }

            if(eachSpec.isEndMaxValue()) {
              specifier.setExpressions(null);
            }
            specifiers.add(specifier);
          }
          if (!specifiers.isEmpty())
            partitionDesc.setSpecifiers(specifiers);
        }
      } else if (expr.getPartition().getPartitionType() == PartitionType.COLUMN) {
        ColumnPartition columnPartition = expr.getPartition();
        partitionDesc.setColumns(convertTableElementsSchema(columnPartition.getColumns()).getColumns());
        partitionDesc.setOmitValues(columnPartition.isOmitValues());
      }
    }

    return partitionDesc;
  }


  /**
   * It transforms table definition elements to schema.
   *
   * @param elements to be transformed
   * @return schema transformed from table definition elements
   */
  private Schema convertTableElementsSchema(CreateTable.ColumnDefinition [] elements) {
    Schema schema = new Schema();

    for (CreateTable.ColumnDefinition columnDefinition: elements) {
      schema.addColumn(convertColumn(columnDefinition));
    }

    return schema;
  }

  private ColumnDefinition[] convertSchemaToTableElements(Schema schema) {
    List<Column> columns = schema.getColumns();
    ColumnDefinition[] columnDefinitions = new ColumnDefinition[columns.size()];
    for(int i = 0; i < columns.size(); i ++) {
      Column col = columns.get(i);
      columnDefinitions[i] = new ColumnDefinition(col.getColumnName(), col.getDataType().getType().name());
    }

    return columnDefinitions;
  }

  private Collection<Column> convertTableElementsColumns(CreateTable.ColumnDefinition [] elements,
                                                         ColumnReferenceExpr[] references) {
    List<Column> columnList = TUtil.newList();

    for(CreateTable.ColumnDefinition columnDefinition: elements) {
      for(ColumnReferenceExpr eachReference: references) {
        if (columnDefinition.getColumnName().equalsIgnoreCase(eachReference.getName())) {
          columnList.add(convertColumn(columnDefinition));
        }
      }
    }

    return columnList;
  }

  private Column convertColumn(ColumnDefinition columnDefinition) {
    return new Column(columnDefinition.getColumnName(), convertDataType(columnDefinition));
  }

  static TajoDataTypes.DataType convertDataType(DataTypeExpr dataType) {
    TajoDataTypes.Type type = TajoDataTypes.Type.valueOf(dataType.getTypeName());

    TajoDataTypes.DataType.Builder builder = TajoDataTypes.DataType.newBuilder();
    builder.setType(type);
    if (dataType.hasLengthOrPrecision()) {
      builder.setLength(dataType.getLengthOrPrecision());
    }
    return builder.build();
  }


  @Override
  public LogicalNode visitDropTable(PlanContext context, Stack<Expr> stack, DropTable dropTable) {
    DropTableNode dropTableNode = new DropTableNode(context.plan.newPID(), dropTable.getTableName(),
        dropTable.isPurge());
    return dropTableNode;
  }
}
