/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

option java_package = "org.apache.tajo.ipc";
option java_outer_classname = "ClientProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;

import "tajo_protos.proto";
import "TajoIdProtos.proto";
import "CatalogProtos.proto";
import "PrimitiveProtos.proto";

enum ResultCode {
  OK = 0;
  ERROR = 1;
}

message UpdateSessionVariableRequest {
  optional SessionIdProto sessionId = 1;
  repeated KeyValueProto setVariables = 2;
  repeated string unsetVariables = 3;
}

message ExplainQueryRequest {
  required string query = 1;
}

message ExplainQueryResponse {
  required ResultCode resultCode = 1;
  optional string explain = 2;
  optional string errorMessage = 3;
}

message QueryRequest {
  optional SessionIdProto sessionId = 1;
  required string query = 2;
  repeated KeyValueProto setVariables = 3;
}

message UpdateQueryResponse {
  required ResultCode resultCode = 1;
  optional string errorMessage = 2;
}

message SubmitQueryResponse {
  required ResultCode resultCode = 1;
  optional QueryIdProto queryId = 2;
  optional string errorMessage = 3;
}

message GetQueryResultRequest {
  optional SessionIdProto sessionId = 1;
  required QueryIdProto queryId = 2;
}

message GetQueryResultResponse {
  optional TableDescProto tableDesc = 1;
  optional string errorMessage = 2;
  required string tajoUserName = 3;
}

message GetQueryListRequest {
  optional SessionIdProto sessionId = 1;
}

message BriefQueryInfo {
  required QueryIdProto queryId = 1;
  required QueryState state = 2;
  required int64 startTime = 3;
  required int64 finishTime = 4;
  required string query = 5;
  required string queryMasterHost = 6;
  required int32 queryMasterPort = 7;
  required float progress = 8;
}

message GetQueryListResponse {
  repeated BriefQueryInfo queryList = 1;
}

message GetQueryStatusRequest {
  optional SessionIdProto sessionId = 1;
  required QueryIdProto queryId = 2;
}

message GetQueryStatusResponse {
  required ResultCode resultCode = 1;
  required QueryIdProto queryId = 2;
  optional QueryState state = 3;
  optional float progress = 4;
  optional int64 submitTime = 5;
  optional int64 finishTime = 7;
  optional bool hasResult = 8;
  optional string errorMessage = 9;
  optional string queryMasterHost = 10;
  optional int32 queryMasterPort = 11;
}

message GetClusterInfoRequest {
  optional SessionIdProto sessionId = 1;
}

message WorkerResourceInfo {
  required string allocatedHost = 1;
  required int32 peerRpcPort = 2;
  required int32 queryMasterPort = 3;
  required int32 clientPort = 4;
  required int32 pullServerPort = 5;
  required int32 httpPort = 6;
  required float diskSlots = 7;
  required int32 cpuCoreSlots = 8;
  required int32 memoryMB = 9;
  required float usedDiskSlots = 10;
  required int32 usedMemoryMB = 11;
  required int32 usedCpuCoreSlots = 12;
  required int64 maxHeap = 13;
  required int64 freeHeap = 14;
  required int64 totalHeap = 15;
  required int32 numRunningTasks = 16;
  required string workerStatus = 17;
  required int64 lastHeartbeat = 18;
  required bool queryMasterMode = 19;
  required bool taskRunnerMode = 20;
  required int32 numQueryMasterTasks = 21;
}

message GetClusterInfoResponse {
  repeated WorkerResourceInfo workerList = 1;
}

message GetTableListRequest {
  optional SessionIdProto sessionId = 1;
}

message GetTableListResponse {
  repeated string tables = 1;
}

message GetTableDescRequest {
  optional SessionIdProto sessionId = 1;
  required string tableName = 2;
}

message CreateTableRequest {
  required string name = 1;
  required SchemaProto schema = 2;
  required TableProto meta = 3;
  required string path = 4;
  optional PartitionMethodProto partition = 5;
}

message DropTableRequest {
  required string name = 1;
  optional bool purge = 2 [default = false];
}

message TableResponse {
  required ResultCode resultCode = 1;
  optional TableDescProto tableDesc = 2;
  optional string errorMessage = 3;
}

message FunctionResponse {
  required ResultCode resultCode = 1;
  repeated FunctionDescProto functions = 2;
  optional string errorMessage = 3;
}
